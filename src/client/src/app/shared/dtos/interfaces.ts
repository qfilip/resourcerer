//     This code was generated by a Reinforced.Typings tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.

import { eEntityStatus } from './enums';

export interface IInstanceOrderedEventDto extends IEntityDto
{
	derivedInstanceId: string;
	sellerCompanyId: string;
	buyerCompanyId: string;
	derivedInstanceItemId?: string;
	quantity: number;
	unitPrice: number;
	totalDiscountPercent: number;
	expectedDeliveryDate?: Date;
	instanceId: string;
	instance: IInstanceDto;
	cancelledEvent: any;
	sentEvent: any;
	deliveredEvent: any;
}
export interface IInstanceReservedEventDto extends IEntityDto
{
	itemProductionOrderId: string;
	quantity: number;
	reason: string;
	instanceId: string;
	instance: IInstanceDto;
	cancelledEvent: any;
	usedEvent: any;
}
export interface IItemProductionOrderDto extends IEntityDto
{
	quantity: number;
	reason: string;
	companyId: string;
	itemRecipeVersion: number;
	itemId: string;
	item: IItemDto;
	instancesUsedIds: any[];
	startedEvent: any;
	cancelledEvent: any;
	finishedEvent: any;
}
export interface ISimple<T>
{
	data: T;
}
export interface IV1CreateCategory
{
	name: string;
	parentCategoryId?: string;
	companyId: string;
}
export interface IV1UpdateCategory
{
	categoryId: string;
	newParentCategoryId?: string;
	newName: string;
}
export interface IV1ChangeCompanyName
{
	companyId: string;
	newName: string;
}
export interface IV1CompanyOverview
{
	name: string;
	employees: IAppUserDto[];
	categories: ICategoryDto[];
}
export interface IV1RemoveCompany
{
	companyId: string;
}
export interface IV1InstanceOrderCancelCommand extends IV1InstanceOrderCommand
{
	instanceId: string;
	orderEventId: string;
	reason: string;
	refundedAmount: number;
}
export interface IV1InstanceOrderCommand
{
}
export interface IV1InstanceOrderCreateCommand extends IV1InstanceOrderCommand
{
	instanceId: string;
	sellerCompanyId: string;
	buyerCompanyId: string;
	derivedInstanceItemId?: string;
	unitsOrdered: number;
	unitPrice: number;
	totalDiscountPercent: number;
	expectedDeliveryDate?: Date;
}
export interface IV1InstanceOrderDeliverCommand extends IV1InstanceOrderCommand
{
	instanceId: string;
	orderEventId: string;
}
export interface IV1InstanceOrderSendCommand extends IV1InstanceOrderCommand
{
	instanceId: string;
	orderEventId: string;
}
export interface IV1DiscardInfo
{
	reason: string;
	quantity: number;
}
export interface IV1InstanceInfo
{
	instanceId: string;
	pendingToArrive: number;
	quantityLeft: number;
	discards: IV1DiscardInfo[];
	expiryDate?: Date;
	purchaseCost: number;
	sellProfit: number;
	sellCancellationsPenaltyDifference: number;
}
export interface IV1ChangeCompositeItemRecipe
{
	compositeId: string;
	excerptMap: { [key:string]: number };
}
export interface IV1ChangeItemCategory
{
	itemId: string;
	newCategoryId: string;
}
export interface IV1ChangeItemName
{
	itemId: string;
	newName: string;
}
export interface IV1CreateCompositeItem
{
	name: string;
	preparationTimeSeconds: number;
	expirationTimeSeconds?: number;
	categoryId: string;
	unitOfMeasureId: string;
	unitPrice: number;
	excerptMap: { [key:string]: number };
}
export interface IV1CreateElementItem
{
	name: string;
	productionPrice: number;
	productionTimeSeconds: number;
	expirationTimeSeconds?: number;
	categoryId: string;
	unitOfMeasureId: string;
	unitPrice: number;
}
export interface IV1ElementItemFormData
{
	categories: ICategoryDto[];
	unitsOfMeasure: IUnitOfMeasureDto[];
}
export interface IV1ItemShoppingDetails
{
	id: string;
	name: string;
	categoryName: string;
	companyId: string;
	companyName: string;
}
export interface IV1ItemStatistics
{
	elementId: string;
	name: string;
	unit: string;
	unitsPurchased: number;
	purchaseCosts: number;
	averagePurchaseDiscount: number;
	unitsSold: number;
	salesEarning: number;
	averageSaleDiscount: number;
	unitsUsedInComposites: number;
	usedInComposites: number;
	unitsInStock: number;
}
export interface IV1ItemStockInfo
{
	id: string;
	name: string;
	totalUnitsInStock: number;
	instancesInfo: IV1InstanceInfo[];
	itemType: string[];
	productionCostAsComposite: number;
	sellingPrice: number;
}
export interface IV1UpdateElementItem
{
	itemId: string;
	name: string;
	productionPrice: number;
	productionTimeSeconds: number;
	expirationTimeSeconds?: number;
	categoryId: string;
	unitOfMeasureId: string;
	unitPrice: number;
}
export interface IV1ChangeItemPrice
{
	itemId: string;
	unitPrice: number;
}
export interface IV1CreateUnitOfMeasure
{
	companyId: string;
	name: string;
	symbol: string;
}
export interface IV1EditUnitOfMeasure
{
	id: string;
	name: string;
	symbol: string;
}
export interface IV1EditUser
{
	userId: string;
	email: string;
	isAdmin: boolean;
	permissionsMap: { [key:string]: string[] };
}
export interface IV1Register
{
	username: string;
	displayName: string;
	email: string;
	password: string;
	companyName: string;
}
export interface IV1RegisterUser
{
	companyId: string;
	username: string;
	email: string;
	isAdmin: boolean;
	permissionsMap: { [key:string]: string[] };
}
export interface IV1SetUserPermissions
{
	userId: string;
	permissions: { [key:string]: string[] };
}
export interface IAuditDto
{
	createdAt: Date;
	modifiedAt: Date;
	createdBy: string;
	modifiedBy: string;
}
export interface IDataSeedDto
{
	appUsers: any[];
	companies: any[];
	categories: any[];
	recipes: any[];
	excerpts: any[];
	unitsOfMeasure: any[];
	prices: any[];
	items: any[];
	itemProductionOrders: any[];
	instances: any[];
	instanceOrderedEvents: any[];
	instanceReservedEvents: any[];
	instanceDiscardedEvents: any[];
}
export interface IFakeCommandDto
{
	number: number;
}
export interface IAppUserDto extends IEntityDto
{
	name: string;
	displayName: string;
	email: string;
	isAdmin: boolean;
	password: string;
	permissionsMap: { [key:string]: string[] };
	companyId: string;
	company: ICompanyDto;
}
export interface ICategoryDto extends IEntityDto
{
	name: string;
	companyId: string;
	company: ICompanyDto;
	parentCategoryId?: string;
	parentCategory: ICategoryDto;
	childCategories: ICategoryDto[];
	items: IItemDto[];
}
export interface ICompanyDto extends IEntityDto
{
	name: string;
	employees: IAppUserDto[];
	categories: ICategoryDto[];
	instances: IInstanceDto[];
	unitsOfMeasure: IUnitOfMeasureDto[];
}
export interface IEntityDto
{
	id: string;
	entityStatus: eEntityStatus;
	auditRecord: IAuditDto;
}
export interface IExcerptDto extends IEntityDto
{
	quantity: number;
	compositeId: string;
	composite: IItemDto;
	elementId: string;
	element: IItemDto;
}
export interface IInstanceDiscardedEventDto extends IEntityDto
{
	quantity: number;
	reason: string;
	instanceId: string;
	instance: IInstanceDto;
}
export interface IInstanceDto extends IEntityDto
{
	quantity: number;
	expiryDate?: Date;
	itemId?: string;
	item: IItemDto;
	ownerCompanyId: string;
	ownerCompany: ICompanyDto;
	sourceInstanceId?: string;
	sourceInstance: IInstanceDto;
	derivedInstances: IInstanceDto[];
	orderedEvents: IInstanceOrderedEventDto[];
	reservedEvents: IInstanceReservedEventDto[];
	discardedEvents: IInstanceDiscardedEventDto[];
}
export interface IItemDto extends IEntityDto
{
	name: string;
	productionPrice: number;
	productionTimeSeconds: number;
	expirationTimeSeconds?: number;
	categoryId: string;
	category: ICategoryDto;
	unitOfMeasureId: string;
	unitOfMeasure: IUnitOfMeasureDto;
	elementExcerpts: IExcerptDto[];
	compositeExcerpts: IExcerptDto[];
	prices: IPriceDto[];
	instances: IInstanceDto[];
	productionOrders: IItemProductionOrderDto[];
}
export interface IPriceDto extends IEntityDto
{
	unitValue: number;
	itemId?: string;
	item: IItemDto;
}
export interface IRecipeDto extends IEntityDto
{
	version: number;
	compositeItemId: string;
	compositeItem: IItemDto;
	recipeExcerpts: IExcerptDto[];
}
export interface IUnitOfMeasureDto extends IEntityDto
{
	name: string;
	symbol: string;
	companyId: string;
	company: ICompanyDto;
	items: IItemDto[];
}
