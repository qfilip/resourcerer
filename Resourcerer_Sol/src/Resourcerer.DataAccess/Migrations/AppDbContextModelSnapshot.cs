// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resourcerer.DataAccess.Contexts;

#nullable disable

namespace Resourcerer.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.AppEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppEvent", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Claims")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Composite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("CurrentPriceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrentPriceId")
                        .IsUnique();

                    b.ToTable("Composite", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Element", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CurrentPriceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CurrentPriceId")
                        .IsUnique();

                    b.ToTable("Element", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Excerpt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("ElementId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Excerpt", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasure", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Category", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Category", "ParentCategory")
                        .WithMany("Categories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Composite", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Category", "Category")
                        .WithMany("Composites")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.Price", "CurrentPrice")
                        .WithOne("Composite")
                        .HasForeignKey("Resourcerer.DataAccess.Entities.Composite", "CurrentPriceId");

                    b.Navigation("Category");

                    b.Navigation("CurrentPrice");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Element", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Category", "Category")
                        .WithMany("Elements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.Price", "CurrentPrice")
                        .WithOne("Element")
                        .HasForeignKey("Resourcerer.DataAccess.Entities.Element", "CurrentPriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("CurrentPrice");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Excerpt", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Composite", "Composite")
                        .WithMany("Excerpts")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.Element", "Element")
                        .WithMany("Excerpts")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Excerpts")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composite");

                    b.Navigation("Element");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Composites");

                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Composite", b =>
                {
                    b.Navigation("Excerpts");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Element", b =>
                {
                    b.Navigation("Excerpts");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Price", b =>
                {
                    b.Navigation("Composite");

                    b.Navigation("Element");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("Excerpts");
                });
#pragma warning restore 612, 618
        }
    }
}
