// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Resourcerer.DataAccess.Contexts;

#nullable disable

namespace Resourcerer.DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.3");

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Claims")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AppUser", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Composite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Composite", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.CompositeSoldEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PriceId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("PriceId");

                    b.ToTable("CompositeSoldEvent", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Element", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UnitOfMeasureId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Element", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.ElementPurchasedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumOfUnits")
                        .HasColumnType("INTEGER");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ElementId");

                    b.ToTable("ElementPurchasedEvent", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Excerpt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Quantity")
                        .HasColumnType("REAL");

                    b.Property<Guid?>("UnitOfMeasureId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.HasIndex("ElementId");

                    b.HasIndex("UnitOfMeasureId");

                    b.ToTable("Excerpt", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Price", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CompositeId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CompositeId");

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.UnitOfMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("UnitOfMeasure", (string)null);
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Category", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Composite", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Category", "Category")
                        .WithMany("Composites")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.CompositeSoldEvent", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Composite", "Composite")
                        .WithMany("CompositeSoldEvents")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.Price", "Price")
                        .WithMany("CompositeSoldEvents")
                        .HasForeignKey("PriceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composite");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Element", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Category", "Category")
                        .WithMany("Elements")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany("Elements")
                        .HasForeignKey("UnitOfMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("UnitOfMeasure");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.ElementPurchasedEvent", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Element", "Element")
                        .WithMany("ElementPurchasedEvents")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Element");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Excerpt", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Composite", "Composite")
                        .WithMany("Excerpts")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.Element", "Element")
                        .WithMany("Excerpts")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Resourcerer.DataAccess.Entities.UnitOfMeasure", null)
                        .WithMany("Excerpts")
                        .HasForeignKey("UnitOfMeasureId");

                    b.Navigation("Composite");

                    b.Navigation("Element");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Price", b =>
                {
                    b.HasOne("Resourcerer.DataAccess.Entities.Composite", "Composite")
                        .WithMany("Prices")
                        .HasForeignKey("CompositeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composite");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Composites");

                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Composite", b =>
                {
                    b.Navigation("CompositeSoldEvents");

                    b.Navigation("Excerpts");

                    b.Navigation("Prices");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Element", b =>
                {
                    b.Navigation("ElementPurchasedEvents");

                    b.Navigation("Excerpts");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.Price", b =>
                {
                    b.Navigation("CompositeSoldEvents");
                });

            modelBuilder.Entity("Resourcerer.DataAccess.Entities.UnitOfMeasure", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Excerpts");
                });
#pragma warning restore 612, 618
        }
    }
}
